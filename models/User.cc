/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "User.h"
#include "File.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cloud_storage;

const std::string User::Cols::_id = "id";
const std::string User::Cols::_login = "login";
const std::string User::Cols::_phone = "phone";
const std::string User::primaryKeyName = "id";
const bool User::hasPrimaryKey = true;
const std::string User::tableName = "user";

const std::vector<typename User::MetaData> User::metaData_ = {
    {"id", "int32_t", "int", 4, 1, 1, 1},
    {"login", "std::string", "varchar(30)", 30, 0, 0, 1},
    {"phone", "std::string", "varchar(30)", 30, 0, 0, 1}};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if (indexOffset < 0)
    {
        if (!r["id"].isNull())
        {
            id_ = std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if (!r["login"].isNull())
        {
            login_ = std::make_shared<std::string>(r["login"].as<std::string>());
        }
        if (!r["phone"].isNull())
        {
            phone_ = std::make_shared<std::string>(r["phone"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if (offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull())
        {
            id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if (!r[index].isNull())
        {
            login_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if (!r[index].isNull())
        {
            phone_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
    }
}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            login_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            phone_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

User::User(const Json::Value &pJson)
{
    if (pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if (pJson.isMember("login"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["login"].isNull())
        {
            login_ = std::make_shared<std::string>(pJson["login"].asString());
        }
    }
    if (pJson.isMember("phone"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["phone"].isNull())
        {
            phone_ = std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                   const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            login_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            phone_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if (pJson.isMember("login"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["login"].isNull())
        {
            login_ = std::make_shared<std::string>(pJson["login"].asString());
        }
    }
    if (pJson.isMember("phone"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["phone"].isNull())
        {
            phone_ = std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
}

const int32_t &User::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if (id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getId() const noexcept
{
    return id_;
}
void User::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename User::PrimaryKeyType &User::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &User::getValueOfLogin() const noexcept
{
    static const std::string defaultValue = std::string();
    if (login_)
        return *login_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getLogin() const noexcept
{
    return login_;
}
void User::setLogin(const std::string &pLogin) noexcept
{
    login_ = std::make_shared<std::string>(pLogin);
    dirtyFlag_[1] = true;
}
void User::setLogin(std::string &&pLogin) noexcept
{
    login_ = std::make_shared<std::string>(std::move(pLogin));
    dirtyFlag_[1] = true;
}

const std::string &User::getValueOfPhone() const noexcept
{
    static const std::string defaultValue = std::string();
    if (phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPhone() const noexcept
{
    return phone_;
}
void User::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[2] = true;
}
void User::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[2] = true;
}

void User::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols = {
        "login",
        "phone"};
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if (dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if (getId())
    {
        ret["id"] = getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getLogin())
    {
        ret["login"] = getValueOfLogin();
    }
    else
    {
        ret["login"] = Json::Value();
    }
    if (getPhone())
    {
        ret["phone"] = getValueOfPhone();
    }
    else
    {
        ret["phone"] = Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if (pMasqueradingVector.size() == 3)
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (getId())
            {
                ret[pMasqueradingVector[0]] = getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (getLogin())
            {
                ret[pMasqueradingVector[1]] = getValueOfLogin();
            }
            else
            {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (getPhone())
            {
                ret[pMasqueradingVector[2]] = getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId())
    {
        ret["id"] = getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getLogin())
    {
        ret["login"] = getValueOfLogin();
    }
    else
    {
        ret["login"] = Json::Value();
    }
    if (getPhone())
    {
        ret["phone"] = getValueOfPhone();
    }
    else
    {
        ret["phone"] = Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if (pJson.isMember("login"))
    {
        if (!validJsonOfField(1, "login", pJson["login"], err, true))
            return false;
    }
    else
    {
        err = "The login column cannot be null";
        return false;
    }
    if (pJson.isMember("phone"))
    {
        if (!validJsonOfField(2, "phone", pJson["phone"], err, true))
            return false;
    }
    else
    {
        err = "The phone column cannot be null";
        return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if (pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (pJson.isMember(pMasqueradingVector[0]))
            {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (pJson.isMember(pMasqueradingVector[1]))
            {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (pJson.isMember(pMasqueradingVector[2]))
            {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
    }
    catch (const Json::LogicError &e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("login"))
    {
        if (!validJsonOfField(1, "login", pJson["login"], err, false))
            return false;
    }
    if (pJson.isMember("phone"))
    {
        if (!validJsonOfField(2, "phone", pJson["phone"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if (pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
        {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
                return false;
        }
        else
        {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
        {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
        {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
                return false;
        }
    }
    catch (const Json::LogicError &e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch (index)
    {
    case 0:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (isForCreation)
        {
            err = "The automatic primary key cannot be set";
            return false;
        }
        if (!pJson.isInt())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 1:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        if (pJson.isString() && std::strlen(pJson.asCString()) > 30)
        {
            err = "String length exceeds limit for the " +
                  fieldName +
                  " field (the maximum value is 30)";
            return false;
        }

        break;
    case 2:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        if (pJson.isString() && std::strlen(pJson.asCString()) > 30)
        {
            err = "String length exceeds limit for the " +
                  fieldName +
                  " field (the maximum value is 30)";
            return false;
        }

        break;
    default:
        err = "Internal error in the server";
        return false;
    }
    return true;
}
std::vector<File> User::getFile(const DbClientPtr &clientPtr) const
{
    static const std::string sql = "select * from file where user_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result)
        { r = result; };
        binder.exec();
    }
    std::vector<File> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(File(row));
    }
    return ret;
}

void User::getFile(const DbClientPtr &clientPtr,
                   const std::function<void(std::vector<File>)> &rcb,
                   const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from file where user_id = ?";
    *clientPtr << sql
               << *id_ >>
        [rcb = std::move(rcb)](const Result &r)
    {
        std::vector<File> ret;
        ret.reserve(r.size());
        for (auto const &row : r)
        {
            ret.emplace_back(File(row));
        }
        rcb(ret);
    } >> ecb;
}
